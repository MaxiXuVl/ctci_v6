import java.io.RandomAccessFile;

// To run it: javac 02_context_switch.java && java Program A
// Then in another terminal: java Program B
class Program {
  public static void main(String[] args) {
    if (args.length < 1) {
      System.out.println("Requires process type A or B");
      return;
    }

    int iterations = 100;

    try {
      // Connect to the named pipe
      RandomAccessFile pipe = new RandomAccessFile("./my-pipe", "rw");

      if (args[0].equals("A")) {
        System.out.println("Process A");

        pipe.write("ping\n".getBytes());
        System.out.println("Send ping. Waiting...");

        for (int i = 0; i < iterations; i++) {
          // Read response from pipe
          String res = null;
          long receiveATime = 0;
          while (res == null) {
            receiveATime = System.nanoTime();
            res = pipe.readLine();
          }

          // System.out.println("Get: " + res + " at: " + receiveATime);
          System.out.println(receiveATime);

          pipe.write("ping\n".getBytes());
        }
      } else {
        System.out.println("Process B");

        for (int i = 0; i < iterations; i++) {
          String req = null;
          while (req == null) {
            req = pipe.readLine();
          }

          long sentBTime = System.nanoTime();
          pipe.write("pong\n".getBytes());
          // System.out.println("Send pong at: " + sentBTime);
          System.out.println(sentBTime);
          Thread.sleep(1);
        }
      }

      // Close the pipe
      pipe.close();
      System.out.println("Done");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

// Receive time (ns) Send time (ns)  Context switch + pipe write
// 665494700875673 665494700857087 18586
// 665494702084904 665494702080931 3973
// 665494703253553 665494703239581 13972
// 665494704382497 665494704361055 21442
// 665494705583790 665494705577344 6446
// 665494706666428 665494706662039 4389
// 665494707755968 665494707741654 14314
// 665494708862436 665494708858540 3896
// 665494710148687 665494710141550 7137
// 665494711384321 665494711358523 25798
// 665494712562131 665494712555302 6829
// 665494713931507 665494713924592 6915
// 665494715370848 665494715360829 10019
// 665494716763068 665494716757057 6011
// 665494718131306 665494718125673 5633
// 665494719492166 665494719486484 5682
// 665494720850621 665494720845828 4793
// 665494722214578 665494722210005 4573
// 665494723489579 665494723485112 4467
// 665494724856646 665494724848620 8026
// 665494726008107 665494726003123 4984
// 665494727366636 665494727360721 5915
// 665494728735344 665494728729069 6275
// 665494730105064 665494730099322 5742
// 665494731506142 665494731499592 6550
// 665494732653429 665494732633716 19713
// 665494733773900 665494733769578 4322
// 665494735149054 665494735144134 4920
// 665494736503854 665494736499117 4737
// 665494737871129 665494737865579 5550
// 665494739090884 665494739086567 4317
// 665494740198101 665494740192679 5422
// 665494741428463 665494741425398 3065
// 665494742794319 665494742787713 6606
// 665494744154715 665494744149581 5134
// 665494745544922 665494745539662 5260
// 665494746907418 665494746902351 5067
// 665494748045504 665494748038813 6691
// 665494749409319 665494749402910 6409
// 665494750823401 665494750818694 4707
// 665494752142770 665494752135167 7603
// 665494753262839 665494753258252 4587
// 665494754387614 665494754382547 5067
// 665494755751040 665494755743593 7447
// 665494756945065 665494756934810 10255
// 665494758332025 665494758322412 9613
// 665494759547165 665494759536978 10187
// 665494761356673 665494761350447 6226
// 665494762730701 665494762725655 5046
// 665494764129724 665494764124429 5295
// 665494765424985 665494765417893 7092
// 665494766857663 665494766850522 7141
// 665494768281575 665494768274666 6909
// 665494769641062 665494769628289 12773
// 665494771036341 665494771030418 5923
// 665494772401601 665494772396240 5361
// 665494773531853 665494773526849 5004
// 665494774899150 665494774893487 5663
// 665494776281590 665494776275783 5807
// 665494777422655 665494777415416 7239
// 665494778559829 665494778554258 5571
// 665494779717287 665494779711744 5543
// 665494780881510 665494780875734 5776
// 665494782320828 665494782314624 6204
// 665494783718881 665494783712499 6382
// 665494784878305 665494784872246 6059
// 665494786252499 665494786247099 5400
// 665494787608682 665494787602935 5747
// 665494788958876 665494788954403 4473
// 665494790169134 665494790163655 5479
// 665494791532083 665494791508875 23208
// 665494792890323 665494792884334 5989
// 665494794249772 665494794244676 5096
// 665494795640282 665494795635590 4692
// 665494797016030 665494797010202 5828
// 665494798174094 665494798169282 4812
// 665494799566725 665494799559333 7392
// 665494800764646 665494800759996 4650
// 665494802112570 665494802107709 4861
// 665494803463880 665494803458989 4891
// 665494804813666 665494804808903 4763
// 665494806167869 665494806162142 5727
// 665494807462746 665494807457618 5128
// 665494808820342 665494808815375 4967
// 665494809955563 665494809950199 5364
// 665494811114620 665494811104419 10201
// 665494812576198 665494812570940 5258
// 665494813958480 665494813953286 5194
// 665494815192505 665494815186629 5876
// 665494816439387 665494816433025 6362
// 665494817803781 665494817798382 5399
// 665494819179197 665494819174374 4823
// 665494820530083 665494820524862 5221
// 665494821875781 665494821871432 4349
// 665494823225993 665494823220793 5200
// 665494824607824 665494824600861 6963
// 665494825897842 665494825891337 6505
// 665494827065203 665494827058245 6958
// 665494828442824 665494828437507 5317
// 665494829588321 665494829582399 5922

//   min 3065
//   median  5704.5
//   max 25798

// Context switch takes no more that 3065 nano seconds
